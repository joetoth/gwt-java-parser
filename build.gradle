apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'eclipse-wtp'
apply plugin: 'jetty'

repositories {
    mavenCentral()
}

buildscript {
  repositories {
    mavenCentral()
  }
}

sourceCompatibility = 1.7
version = '1.0'
jar {
    manifest {
        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version,
        	'Main-Class': 'com.smashcrush.shell.server.ShellServer'
    }
}

project.ext.grammarpackage = "java"

configurations {
    antlr3
}


dependencies {
    compile 'org.antlr:antlr-runtime:3.2'
    antlr3 'org.antlr:antlr:3.2'
    testCompile group: 'junit', name: 'junit', version: '4.+'


	  compile 'org.eclipse.jetty:jetty-server:8.1.5.v20120716'
    compile 'com.google.gwt:gwt-user:2.5.0-rc1'
    compile 'com.google.gwt:gwt-dev:2.5.0-rc1'
    compile 'com.google.inject.extensions:guice-servlet:3.0'
    compile 'com.google.gwt.inject:gin:1.5.0'
    compile 'com.google.guava:guava:13.0'
    compile 'com.google.guava:guava-gwt:13.0'
    compile 'org.eclipse.jetty:jetty-webapp:8.1.5.v20120716'
    compile 'org.eclipse.jetty:jetty-websocket:8.1.5.v20120716'
    compile 'javax.servlet:javax.servlet-api:3.0.1'
    compile 'com.google.gwt:gwt-elemental:2.5.0-rc1'
    compile 'com.google.gwt:gwt-codeserver:2.5.0-rc1'
     
     
    // Needed for GWT compile and at runtime for RequestBuilder
    // Specify two artifacts as workaround for GRADLE-1934
    compile('javax.validation:validation-api:1.0.0.GA') { 
        artifact {
            name = 'validation-api'
            type = 'jar'
        }
        artifact {
            name = 'validation-api'
            type = 'jar'
            classifier = 'sources'
        }
    }
     
    // Runtime GWT libraries, should be included in WAR
    compile 'com.google.gwt:gwt-servlet:2.5.0-rc1'
    runtime 'org.json:json:20090211'                               
                        
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

test {
    systemProperties 'property': 'value'
}


task compileGwt (dependsOn: classes, type: JavaExec) {
    dependsOn compileJava
    
    maxHeapSize = '512M'
    buildDir = "build/resources/main/com/smashcrush/webapp"
    // extraDir = "${project.buildCommandldDir}/extra"
     
    inputs.source sourceSets.main.java.srcDirs
    inputs.dir sourceSets.main.output.resourcesDir
    // outputs.dir "generated/com/smashcrush/webapp"
     
    // Workaround for incremental build (GRADLE-1483)
    outputs.upToDateSpec = new org.gradle.api.specs.AndSpec()
     
    doFirst {
        file(buildDir).mkdirs()
    }
     
    main = 'com.google.gwt.dev.Compiler'
     
    classpath {
        [
            sourceSets.main.java.srcDirs,           // Java source
            sourceSets.main.output.resourcesDir,    // Generated resources
            sourceSets.main.output.classesDir,      // Generated classes
            sourceSets.main.compileClasspath,       // Deps
        ]   
    }
     
    args =
        [
            'com.smashcrush.shell.Module', // Your GWT module
            // '-war', buildDir,
            '-war', 'src/main/webapp',
            '-logLevel', 'INFO',
            '-localWorkers', '5',
            '-compileReport', 
            ,
            // '-extra', extraDir,
            '-draftCompile' // Speeds up compile with 25%
        ]
         
}

task antlrOutputDir << {
    mkdir(generateGrammarSource.destinationDir)
}

task generateGrammarSource(dependsOn: antlrOutputDir, type: JavaExec) {
    description = 'Generates Java sources from Antlr3 grammars.'

    destinationDir = "$buildDir/generated-sources/antlr"
    def antlrSource = 'src/main/antlr'

    inputs.dir file(antlrSource)
    outputs.dir file(destinationDir)

    def grammars = fileTree(antlrSource).include('**/*.g')

    main = 'org.antlr.Tool'
    classpath = configurations.antlr3
    args = ["-o", "${destinationDir}/${project.ext.grammarpackage}", grammars.files].flatten()
}

compileJava {
    dependsOn generateGrammarSource
    source generateGrammarSource.destinationDir
}

 /*
 war {
    from 'src/main/webapp' // adds a file-set to the root of the archive
    webInf { from 'src/additionalWebInf' } // adds a file-set to the WEB-INF dir.
    classpath fileTree('additionalLibs') // adds a file-set to the WEB-INF/lib dir.
    classpath configurations.moreLibs // adds a configuration to the WEB-INF/lib dir.
    webXml = file('src/someWeb.xml') // copies a file to WEB-INF/web.xml
}
*/
 
war.dependsOn compileGwt
war {
    from compileGwt.buildDir
}

eclipse {
    sourceSets.main.java.srcDirs = sourceSets.main.java.srcDirs + file('build/generated-sources/antlr/java');
    /*project {
        natures 'com.google.gwt.eclipse.core.gwtNature'
        buildCommand 'com.google.gdt.eclipse.core.webAppProjectValidator'
        buildCommand 'com.google.gwt.eclipse.core.gwtProjectValidator'       
    }*/
  
}


task devmode << {
eeee = sourceSets.main.runtimeClasspath + files('src/main/java', 'src/main/resources')

    maxHeapSize = '512M'
       eeee.each {
    println "${it}"
   }
    javaexec {
      main = 'com.google.gwt.dev.DevMode'
      classpath = eeee
      args = ['-startupUrl', '/index.html', '-noserver', 'com.smashcrush.shell.Module']
    }    
}

task superdevmode << {
   sourceSets.main.runtimeClasspath.each {
   	println "${it}"
   }
     
    maxHeapSize = '512M'
    
    javaexec {
    	main = 'com.google.gwt.dev.codeserver.CodeServer'
    	classpath = sourceSets.main.runtimeClasspath + files('src/main/java', 'src/main/resources')
    	args = ['-src', 'src/main/java', 'com.smashcrush.shell.Module']
    }
    
}
